// detect cycle in in linkedlist
// using hare and tortoise algo

#include<iostream>
using namespace std;

class node
{   
    public:
    int data;
    node* next;

 node(int val)
 {
    data=val;
    next=NULL;

 }

};
void insert(node* &head, int val)
{   
    node*n =new node(val);
    if(head==NULL)
    {
        head=n;
        return;
    }

    node* temp=head;
    while(temp->next!=NULL)
    {
        temp=temp->next;
    }
    temp->next=n;
}


void display(node* head)
{
    node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<" ";
        temp=temp->next;
    }
    cout<<endl;
}

void make_cycle( node* &head, int pos)
{
    node* temp=head;
    node* startnode;

    int count=1;
    while(temp->next!=NULL)
    {
        if(count==pos){
            startnode=temp;

        }
        temp=temp->next;
        count++;
    }
    temp->next=startnode; // last node pointing to cycle

}

bool detect_cycle(node* &head)
{
    node* slow=head;
    node* fast=head;
    while(fast!=NULL && fast->next!=NULL)
    {
        slow=slow->next;
        fast=fast->next->next;

        if(fast==slow)
        {
            return true;
        }
        
    }
    return false;
}  

void remove_cycle(node* &head)
{

     node* slow=head;
    node* fast=head;
   do{
       slow=slow->next;
       fast=fast->next->next;

   }while(slow!=fast);
    fast=head;
    while(slow->next!=fast->next)
    {
        slow=slow->next;
        fast=fast->next;

    }
    slow->next=NULL;
}

int  main()
{       
    int a;
    cin>>a;
    node* head=NULL;
    insert(head,1);
    insert(head,2);
    insert(head,3);
    insert(head,4);
    insert(head,5);
    insert(head,6);
    insert(head,7);
    
    display(head);
    make_cycle(head,4);

    cout<<detect_cycle(head);
    remove_cycle(head);
    cout<<endl;

    cout<<detect_cycle(head);
    cout<<endl;

    display(head);



    return 0;
}
